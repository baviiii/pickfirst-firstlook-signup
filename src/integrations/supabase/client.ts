// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://rkwvgqozbpqgmpbvujgz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJrd3ZncW96YnBxZ21wYnZ1amd6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTIzMDYyNDMsImV4cCI6MjA2Nzg4MjI0M30.fSLOGnAo3OU7B726VAAAboPtWJZkBoVuSlttuHzpVJU";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Utility function to clear corrupted tokens
export const clearAuthTokens = () => {
  try {
    // Clear Supabase auth tokens
    localStorage.removeItem('sb-rkwvgqozbpqgmpbvujgz-auth-token');
    localStorage.removeItem('supabase.auth.token');
    
    // Clear any other potential auth-related items
    const keys = Object.keys(localStorage);
    keys.forEach(key => {
      if (key.includes('supabase') || key.includes('auth')) {
        localStorage.removeItem(key);
      }
    });
    
    console.log('Auth tokens cleared successfully');
  } catch (error) {
    console.error('Error clearing auth tokens:', error);
  }
};

// Enhanced error handling for auth errors
export const handleAuthError = async (error: any) => {
  // Only redirect on actual token/session errors, not authentication failures
  if (error?.message?.includes('Invalid Refresh Token') || 
      error?.message?.includes('Refresh Token Not Found') ||
      error?.message?.includes('JWT expired') ||
      error?.message?.includes('Invalid JWT')) {
    
    console.log('Detected auth token error, clearing tokens...');
    clearAuthTokens();
    
    // Redirect to login page
    if (typeof window !== 'undefined') {
      window.location.href = '/auth';
    }
  }
  
  // Don't redirect on authentication failures like wrong password
  // These should be handled by the calling function
  if (error?.message?.includes('Invalid login credentials') ||
      error?.message?.includes('Email not confirmed') ||
      error?.message?.includes('Invalid email or password')) {
    console.log('Authentication failed:', error.message);
    // Don't redirect, let the calling function handle the error
    return;
  }
};