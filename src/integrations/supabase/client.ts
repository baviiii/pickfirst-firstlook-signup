// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_PUBLISHABLE_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

export const clearAuthTokens = async (): Promise<void> => {
  try {
    await supabase.auth.signOut();
    // Clear any additional auth-related data from localStorage if needed
    ['sb-access-token', 'sb-refresh-token'].forEach(key => {
      localStorage.removeItem(key);
    });
  } catch (error) {
    console.error('Error clearing auth tokens:', error);
    throw error;
  }
};

export const handleAuthError = async (error: any): Promise<void> => {
  // Check if the error is related to authentication/session issues
  const isAuthError = 
    error?.message?.includes('Invalid Refresh Token') ||
    error?.message?.includes('Refresh Token Not Found') ||
    error?.message?.includes('JWT expired') ||
    error?.message?.includes('session_not_found') ||
    error?.status === 401 ||
    error?.status === 403;

  if (isAuthError) {
    console.warn('Authentication error detected, clearing tokens:', error.message);
    try {
      await clearAuthTokens();
      // Optionally redirect to login page
      // window.location.href = '/login';
    } catch (clearError) {
      console.error('Error clearing tokens after auth error:', clearError);
    }
  } else {
    // Log non-auth errors for debugging
    console.error('Non-auth error:', error);
  }
};